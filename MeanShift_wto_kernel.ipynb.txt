{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MeanShift_wto_kernel.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kuw4CREiEWwW"
      },
      "source": [
        "# Reference : https://pythonprogramming.net/mean-shift-from-scratch-python-machine-learning-tutorial/\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import style\n",
        "style.use('ggplot')\n",
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vbd4KenphWFp",
        "outputId": "ba49f643-2ebb-4bf4-9f6f-9d0d5b93abb0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "X = np.array([[1, 2],\n",
        "              [1.5, 1.8],\n",
        "              [5, 8 ],\n",
        "              [8, 8],\n",
        "              [1, 0.6],\n",
        "              [9,11],\n",
        "              [8,2],\n",
        "              [10,2],\n",
        "              [9,3],])\n",
        "\n",
        "plt.scatter(X[:,0], X[:,1], s=50)\n",
        "plt.show()\n",
        "\n",
        "# colors = 10*[\"g\",\"r\",\"c\",\"b\",\"k\"]"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ERofH7VNhc3k"
      },
      "source": [
        "''' \n",
        "Here, we begin with creating starting centroids. Recall the method for Mean Shift is:\n",
        "1. Make all datapoints centroids\n",
        "2. Take mean of all featuresets within centroid's radius, setting this mean as new centroid.\n",
        "3. Repeat step #2 until convergence.\n",
        "'''\n",
        "\n",
        "class Mean_Shift:\n",
        "    def __init__(self, radius=4):\n",
        "        self.radius = radius\n",
        "\n",
        "    def fit(self, data):\n",
        "        centroids = {}\n",
        "\n",
        "        for i in range(len(data)):\n",
        "            centroids[i] = data[i]\n",
        "\n",
        "        while True:\n",
        "            new_centroids = []\n",
        "            for i in centroids:\n",
        "                in_bandwidth = []\n",
        "                centroid = centroids[i]\n",
        "                # find data points in the bandwidth (= window =circle)\n",
        "                for featureset in data:\n",
        "                    if np.linalg.norm(featureset - centroid) < self.radius:\n",
        "                        in_bandwidth.append(featureset)\n",
        "                # Find the center of mass\n",
        "                new_centroid = np.average(in_bandwidth,axis=0)\n",
        "                new_centroids.append(tuple(new_centroid))\n",
        "\n",
        "            uniques = sorted(list(set(new_centroids)))\n",
        "\n",
        "            prev_centroids = dict(centroids)\n",
        "\n",
        "            centroids = {}\n",
        "            for i in range(len(uniques)):\n",
        "                centroids[i] = np.array(uniques[i])\n",
        "\n",
        "            optimized = True\n",
        "\n",
        "            for i in centroids:\n",
        "                if not np.array_equal(centroids[i], prev_centroids[i]):\n",
        "                    optimized = False\n",
        "                if not optimized:\n",
        "                    break\n",
        "                \n",
        "            if optimized:\n",
        "                break\n",
        "\n",
        "        self.centroids = centroids"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fKrN-9zYkBdg",
        "outputId": "a0a7348e-766d-4d4d-a397-e4e3f882312f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "clf = Mean_Shift()\n",
        "clf.fit(X)\n",
        "\n",
        "centroids = clf.centroids\n",
        "\n",
        "plt.scatter(X[:,0], X[:,1], s=50)\n",
        "\n",
        "for c in centroids:\n",
        "    plt.scatter(centroids[c][0], centroids[c][1], color='k', marker='*', s=50)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}